{"version":3,"file":"static/js/415.9f3dc03c.chunk.js","mappings":"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","sources":["components/ListOfMoviesItem/ListOfMoviesItem.styled.jsx","components/ListOfMoviesItem/ListOfMoviesItem.jsx","components/ListOfMovies/ListOfMovies.styled.jsx","components/ListOfMovies/ListOfMovies.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","pages/Home.jsx","utils/api.js"],"sourcesContent":["import styled from 'styled-components';\n\n// саме сюди імпортуємо NavLink, який потім стилізуємо\nimport { NavLink } from 'react-router-dom';\n\nexport const Li = styled.li`\n  /*----Базовий стиль для мобілки до 479 (респонсивний)----*/\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* gap: 20px; */\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    max-width: 220px;\n  }\n\n  /*----Стиль для планшета 768-1200----*/\n\n  @media screen and (min-width: 768px) {\n    max-width: 177px;\n  }\n\n  /*----Стиль для компа від 1200----*/\n\n  @media screen and (min-width: 1200px) {\n    max-width: 226px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  height: 100%;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  overflow: hidden;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  cursor: pointer;\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    max-width: 220px;\n    height: 330px;\n  }\n\n  /*----Стиль для планшета 768-1200----*/\n\n  @media screen and (min-width: 768px) {\n    max-width: 177px;\n    height: 265px;\n  }\n\n  /*----Стиль для компа від 1200----*/\n\n  @media screen and (min-width: 1200px) {\n    max-width: 226px;\n    height: 339px;\n  }\n`;\n\nexport const Img = styled.img`\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  transition: scale 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  display: block;\n\n  &:hover {\n    scale: 1.1;\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: flex;\n  height: 100% !important;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n\n  height: auto;\n  text-decoration: none;\n  color: #ff6b17;\n  padding: 9px 5px;\n  background: #ffe9dc;\n  border: 2px solid rgba(255, 107, 23, 0.15);\n  border-radius: 15px;\n\n  :hover {\n    background: #ff6b17;\n    color: #f5f5f5;\n  }\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// підключення нестилізованого Link як обгортки для постера фільму\nimport { Link } from 'react-router-dom';\n\n// підключення useLocation для отримання поточної адреси сторінки\nimport { useLocation } from 'react-router-dom';\n\n// стилізовані компоненти для верстки\nimport { Li, Thumb, Img, StyledNavLink } from './ListOfMoviesItem.styled';\n\n// постер, якщо на бекенді немає картинки\nimport NoPosterImage from '../../images/noPoster.jpg';\n\nconst ListOfMoviesItem = ({ movie }) => {\n  // створюємо локейшн сторінки\n  const location = useLocation();\n\n  // постер  фільма, але якщо з api прийде постер, то міняємо його на той, що прийшов\n  let posterPath = NoPosterImage;\n  if (movie.poster_path) {\n    posterPath = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n  }\n\n  // фільм огортаємо в Li (бо це елемент списку)\n  // картинку огортаємо в Link на адресу фільма\n  // в to вказуємо посилання в state - посилання на поточну сторінку\n  // на бекенді назви фільмів зберігаються або в параметрі title або в name\n  // бередьачаємо два варіанти залежно від того, де зберігається назва фільма\n  return (\n    <Li>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        <Thumb>\n          <Img src={posterPath} width={`100%`} alt=\"preview\" />\n        </Thumb>\n      </Link>\n\n      {/* якщо назва фільму в параметрі film.title */}\n      {movie.title && (\n        <StyledNavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n          <span>{movie.title}</span>\n        </StyledNavLink>\n      )}\n      {/* якщо назва фільму в параметрі film.name */}\n      {movie.name && (\n        <StyledNavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n          <span>{movie.name}</span>\n        </StyledNavLink>\n      )}\n    </Li>\n  );\n};\n\nexport default ListOfMoviesItem;\n\n// перевірка типів пропів\nListOfMoviesItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  /*----Базовий стиль для мобілки до 479 (респонсивний)----*/\n  /* border: 2px solid tomato; */\n  list-style: none;\n  padding: 0;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// підключаємо компонент одного конкретного фільма для мапання\nimport ListOfMoviesItem from '../ListOfMoviesItem/ListOfMoviesItem';\n\n// стилізований компонент (прибираємо ліст стайл і паддінги)\nimport { Ul } from './ListOfMovies.styled';\n\n// в компоненті із отриманого масива фільмів мапаємо(перебираємо) і\n//  верстаємо компонент одного фільма\nconst ListOfMovies = ({ trendingMovies }) => {\n  return (\n    <Ul>\n      {trendingMovies.map(movie => (\n        <ListOfMoviesItem key={movie.id} movie={movie} />\n      ))}\n    </Ul>\n  );\n};\n\n// перевірка пропТайпів\nListOfMovies.propTypes = {\n  trendingMovies: PropTypes.array.isRequired,\n};\n\nexport default ListOfMovies;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(1);\n`;\n","// підключення спінера лоадера\nimport { CirclesWithBar } from 'react-loader-spinner';\n\n// підключаємо ф-ію роботи з порталами в реакт домі\nimport { createPortal } from 'react-dom';\n\n// стилізація контейнера лоадера\nimport { LoaderContainer } from './Loader.styled';\n\n//створюємо новий елемент який буде порталом для модадки\nconst loaderRoot = document.querySelector('#loader-root');\n\n// в createPortal передаємо нащ доадер в контейнері\n//  доугим параметром передаємо імʼя елемента, який буде порталом\nconst Loader = () => {\n  return createPortal(\n    <LoaderContainer>\n      <CirclesWithBar\n        height=\"150\"\n        width=\"300\"\n        color=\"#ff6b17\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        barColor=\"\"\n        ariaLabel=\"circles-with-bar-loading\"\n      />\n    </LoaderContainer>,\n    loaderRoot\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const StyledTitle = styled.h1`\n  color: #ff6b17;\n  text-align: center;\n  margin: 0;\n  margin-bottom: 10px;\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// імпорт стилю заголовка\nimport { StyledTitle } from './Title.styled';\n\nconst Title = ({ text }) => {\n  return <StyledTitle>{text}</StyledTitle>;\n};\n\nexport default Title;\n\n// перевірка типів пропів\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","// підключення React і хуків useState, useEffect\nimport React, { useState, useEffect } from 'react';\n\n// підключення компонентів\nimport Loader from '../components/Loader/Loader';\nimport Title from '../components/Title/Title';\nimport ListOfMovies from '../components/ListOfMovies/ListOfMovies';\n\n// підключення стилю контейнера, щоб відсікти ширину\nimport { Container } from 'components/App.styled';\n\n// підключення функції отримання трендових фільмів із api\nimport { getTrendiingMovies } from '../utils/api';\n\nconst Home = () => {\n  // стейти масив трендових фільмів і показ лоадеру і відловлення помилок\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [showLoader, setShowLoader] = useState(false);\n  const [error, setError] = useState(null);\n\n  // перше і єдине завантаження сторінки\n  useEffect(() => {\n    // вмикаємо лоадер\n    setShowLoader(true);\n\n    //отримуємо фільми, записуємо в стейт, ловимо помилки, на фінал знімаємо лоадер\n    getTrendiingMovies()\n      .then(data => {\n        setTrendingMovies(data.results);\n      })\n      .catch(e => {\n        setError(e.message);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  }, []);\n\n  // Верстка головної сторінки\n  // лоадер, секція-контейнер (семантика + обмеженя по ширині), заголовок, список трендових фільмів\n  return (\n    <>\n      {showLoader && <Loader />}\n      <section>\n        <Container>\n          {error && <p>{error}</p>}\n          <Title text=\"Trending today\" />\n          <ListOfMovies trendingMovies={trendingMovies} />\n        </Container>\n      </section>\n    </>\n  );\n};\n\nexport default Home;\n","// базовий URL і ключ для доступу до API\nconst API_KEY = 'f051ac50d3bfe0c3fd75f02c1ff7b688';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n// // 1-1 отримання трендових фільмів fetch-then\n// // працює некоректно через бани на самому api\n// export const getTrendiingMovies = () => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/trending/all/week?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 1-2 отримання популярних фільмів fetch-then (без косяків апішки)\nexport const getTrendiingMovies = () => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n\n// // 2-1 отримання фільму по id fetch-then\n// export const getMovieById = movieId => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 2-2 отримання фільму по id з використанням асинхронної функції async-await\nexport const getMovieById = async movieId => {\n  try {\n    const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n    const response = await fetch(URL);\n    const movie = await response.json();\n    // console.log('movie', movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// 3 отримання фільмів fetch-then за назвою запиту і сторінкою\nexport const getMoviesByNameAndPage = (toFind, page) => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/search/movie?query=${toFind}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 4 отримання акторів fetch-then по id фільма\nexport const getMovieCastById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 5 отримання review fetch-then по id фільма\nexport const getMovieReviewById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n"],"names":["Li","styled","Thumb","Img","StyledNavLink","NavLink","movie","location","useLocation","posterPath","NoPosterImage","poster_path","to","id","state","from","src","width","alt","title","name","Ul","trendingMovies","map","LoaderContainer","loaderRoot","document","querySelector","createPortal","height","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","StyledTitle","text","useState","setTrendingMovies","showLoader","setShowLoader","error","setError","useEffect","getTrendiingMovies","then","data","results","catch","e","message","finally","API_KEY","BASE_URL","URL","fetch","response","json","getMovieById","movieId","console","log","getMoviesByNameAndPage","toFind","page","getMovieCastById","getMovieReviewById"],"sourceRoot":""}