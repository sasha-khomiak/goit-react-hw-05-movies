{"version":3,"file":"static/js/80.72eed45c.chunk.js","mappings":"2NAKaA,EAAKC,EAAAA,GAAAA,GAAH,0gCAyBFC,EAAQD,EAAAA,GAAAA,IAAH,+9BA8BLE,EAAMF,EAAAA,GAAAA,IAAH,+LAYHG,GAAgBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,uY,mBClB1B,EAvCyB,SAAC,GAAe,IAAbK,EAAY,EAAZA,MAEpBC,GAAWC,EAAAA,EAAAA,MAGbC,EAAaC,EAUjB,OATIJ,EAAMK,cACRF,EAAU,yCAAqCH,EAAMK,eASrD,UAACX,EAAD,YACE,SAAC,KAAD,CAAMY,GAAE,kBAAaN,EAAMO,IAAMC,MAAO,CAAEC,KAAMR,GAAhD,UACE,SAACL,EAAD,WACE,SAACC,EAAD,CAAKa,IAAKP,EAAYQ,MAAK,OAAUC,IAAI,gBAK5CZ,EAAMa,QACL,SAACf,EAAD,CAAeQ,GAAE,kBAAaN,EAAMO,IAAMC,MAAO,CAAEC,KAAMR,GAAzD,UACE,0BAAOD,EAAMa,UAIhBb,EAAMc,OACL,SAAChB,EAAD,CAAeQ,GAAE,kBAAaN,EAAMO,IAAMC,MAAO,CAAEC,KAAMR,GAAzD,UACE,0BAAOD,EAAMc,WAKtB,EClDYC,EAAKpB,EAAAA,GAAAA,GAAH,8uBCwBf,EAfqB,SAAC,GAAwB,IAAtBqB,EAAqB,EAArBA,eACtB,OACE,SAACD,EAAD,UACGC,EAAeC,KAAI,SAAAjB,GAAK,OACvB,SAAC,EAAD,CAAiCA,MAAOA,GAAjBA,EAAMO,GADN,KAK9B,C,0FCjBYW,E,QAAkBvB,GAAAA,IAAH,qH,SCQtBwB,EAAaC,SAASC,cAAc,gBAwB1C,EApBe,WACb,OAAOC,EAAAA,EAAAA,eACL,SAACJ,EAAD,WACE,SAAC,KAAD,CACEK,OAAO,MACPZ,MAAM,MACNa,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,iBAAiB,GACjBC,iBAAiB,GACjBC,SAAS,GACTC,UAAU,+BAGdZ,EAEH,C,sEC9BYa,E,QAAcrC,GAAAA,GAAH,wG,SCQxB,EAJc,SAAC,GAAc,IAAZsC,EAAW,EAAXA,KACf,OAAO,SAACD,EAAD,UAAcC,GACtB,C,6LCFYC,EAAOvC,EAAAA,GAAAA,KAAH,gMAUJwC,EAAYxC,EAAAA,GAAAA,OAAH,ujBAyBTyC,GAAUzC,EAAAA,EAAAA,IAAO0C,EAAAA,EAAP1C,CAAH,sGAOP2C,EAAQ3C,EAAAA,GAAAA,MAAH,siBClBlB,I,EACA,EAAe,IAA0B,gE,SC6BzC,EA/CkB,SAAC,GAAkB,IAAhB4C,EAAe,EAAfA,SAEnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAqBA,OACE,UAACR,EAAD,CAAMK,SAba,SAAAI,GACnBA,EAAMC,iBACe,KAAjBH,EAAMI,QAIVN,EAASE,EAAMI,QACfH,EAAS,KAJPA,EAAS,GAKZ,EAKC,WACE,UAACP,EAAD,CAAWW,KAAK,SAAhB,WACE,SAACV,EAAD,CAAS1B,IAAKqC,KACd,iBAAMC,KAAK,MAAM,aAAW,qBAG9B,SAACV,EAAD,CACEQ,KAAK,OACLG,aAAa,MACbC,WAAS,EACTC,YAAY,mBACZC,MAAOX,EACPY,SA/BoB,SAAAV,GACxBD,EAASC,EAAMW,cAAcF,MAC9B,MAiCF,E,oBCnDYG,EAAS5D,EAAAA,GAAAA,OAAH,kmBCkBnB,EAbuB,SAAC,GAAwB,IAAtB6D,EAAqB,EAArBA,eACxB,OACE,+BACE,SAACD,EAAD,CAAQE,QAASD,EAAjB,SAAiC,eAGtC,E,kECsKD,EA1Je,WAQb,OAAsChB,EAAAA,EAAAA,UAAS,IAA/C,eAAOkB,EAAP,KAAoBC,EAApB,KAEA,GAAwBnB,EAAAA,EAAAA,UAAS,GAAjC,eAAOoB,EAAP,KAAaC,EAAb,KACA,GAA8CrB,EAAAA,EAAAA,WAAS,GAAvD,eAAOsB,EAAP,KAAwBC,EAAxB,KACA,GAAoCvB,EAAAA,EAAAA,WAAS,GAA7C,eAAOwB,EAAP,KAAmBC,EAAnB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACM3B,EAAQ0B,EAAaE,IAAI,UAG/BC,EAAAA,EAAAA,YAAU,WAEH7B,IAILwB,GAAc,IAEdM,EAAAA,EAAAA,IAAuB9B,EAAO,GAC3B+B,MAAK,SAAAC,GACJd,GAAe,OAAIc,EAAKC,UACE,GACFD,EAAKE,eAC3BZ,GAAmB,EAEtB,IACAa,SAAQ,WACPX,GAAc,EACf,IAEJ,GAAE,IAOH,IAqBMY,EAAa,SAACC,EAAQlB,GAC1BK,GAAc,IAEdM,EAAAA,EAAAA,IAAuBO,EAAQlB,GAC5BY,MAAK,SAAAC,GAIJ,GAAIA,EAAKE,cAAgB,EACvBI,EAAAA,GAAAA,MAAA,mEAA2BD,EAA3B,mGACAjB,EAAQ,GACRO,EAAgB,CAAC,GACjBL,GAAmB,QAIhB,GAA2B,IAAvBU,EAAKE,cAAqB,CACjChB,GAAe,SAAAqB,GAAe,wBACzBA,IADyB,OAEzBP,EAAKC,SAFoB,IAU9B,IAAMO,EAAoB,GAAKrB,EAC/B,GAAIqB,EAAoBR,EAAKE,cAAe,CAE1C,GAAa,IAATf,GACFmB,EAAAA,EAAAA,IAAM,4DAAD,OACYD,EADZ,0GACyCL,EAAKE,cAD9C,wQAKF,CACH,IAAMO,EAAaT,EAAKE,cAAgBM,GACxCF,EAAAA,EAAAA,IAAM,4DAAD,OACYD,EADZ,uHAC4CI,EAD5C,yBAC6DT,EAAKE,cADlE,mQAGN,CAEDZ,GAAmB,EACpB,MAGCgB,EAAAA,EAAAA,IAAM,yJAAD,OAC8BD,EAD9B,yIAGLf,GAAmB,EAEtB,CACF,IAMAa,SAAQ,WACPX,GAAc,EACf,GACJ,EAED,OACE,gCACGD,IAAc,SAACmB,EAAA,EAAD,KACf,SAAC,KAAD,CAAgBC,UAAW,OAC3B,8BACE,UAAC,IAAD,YACE,SAACC,EAAA,EAAD,CAAOpD,KAAK,mBACZ,SAAC,EAAD,CAAWM,SA5FO,SAAAuC,GACpBA,IAAWrC,GAIfkB,EAAe,IACfE,EAAQ,GACRgB,EAAWC,EAAQ,GACnBV,EAAgB,CAAE3B,MAAOqC,MANvBC,EAAAA,EAAAA,IAAM,6NAAD,OAA+CD,EAA/C,MAOR,IAqF+B,IAAvBpB,EAAY4B,SACX,gBAAK5E,IAAK6E,EAAgB3E,IAAI,cAER,IAAvB8C,EAAY4B,SACX,SAACE,EAAA,EAAD,CAAcxE,eAAgB0C,IAE/BI,IACC,SAAC,EAAD,CAAgBN,eAvFH,WACrBqB,EAAWpC,EAAOmB,EAAO,GACzBC,GAAQ,SAAA4B,GAAQ,OAAIA,EAAW,CAAf,GACjB,WA0FF,C,yLChLKC,EAAU,mCACVC,EAAW,8BAUJC,EAAqB,WAEhC,IAAMC,EAAG,UAAMF,EAAN,mCAAyCD,EAAzC,WACT,OAAOI,MAAMD,GAAKrB,MAAK,SAAAuB,GAAQ,OAAIA,EAASC,MAAb,GAChC,EAUYC,EAAY,mCAAG,WAAMC,GAAN,2FAElBL,EAFkB,UAETF,EAFS,mBAEUO,EAFV,oBAE6BR,GAF7B,SAGDI,MAAMD,GAHL,cAGlBE,EAHkB,gBAIJA,EAASC,OAJL,cAIlBhG,EAJkB,yBAMjBA,GANiB,kCAQxBmG,QAAQC,IAAI,KAAMC,SARM,0DAAH,sDAaZ9B,EAAyB,SAACO,EAAQlB,GAE7C,IAAMiC,EAAG,UAAMF,EAAN,gCAAsCb,EAAtC,oDAAwFlB,EAAxF,oBAAwG8B,GACjH,OAAOI,MAAMD,GAAKrB,MAAK,SAAAuB,GAAQ,OAAIA,EAASC,MAAb,GAChC,EAGYM,EAAmB,SAAAJ,GAE9B,IAAML,EAAG,UAAMF,EAAN,mBAAyBO,EAAzB,2CAAmER,GAC5E,OAAOI,MAAMD,GAAKrB,MAAK,SAAAuB,GAAQ,OAAIA,EAASC,MAAb,GAChC,EAGYO,EAAqB,SAAAL,GAEhC,IAAML,EAAG,UAAMF,EAAN,mBAAyBO,EAAzB,2CAAmER,EAAnE,WACT,OAAOI,MAAMD,GAAKrB,MAAK,SAAAuB,GAAQ,OAAIA,EAASC,MAAb,GAChC,C","sources":["components/ListOfMoviesItem/ListOfMoviesItem.styled.jsx","components/ListOfMoviesItem/ListOfMoviesItem.jsx","components/ListOfMovies/ListOfMovies.styled.jsx","components/ListOfMovies/ListOfMovies.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Title/Title.styled.jsx","components/Title/Title.jsx","components/Searchbar/Searchbar.styled.jsx","images/search-loop.svg","components/Searchbar/Searchbar.jsx","components/LoadMoreButton/LoadMoreButton.styled.jsx","components/LoadMoreButton/LoadMoreButton.jsx","pages/Movies.jsx","utils/api.js"],"sourcesContent":["import styled from 'styled-components';\n\n// саме сюди імпортуємо NavLink, який потім стилізуємо\nimport { NavLink } from 'react-router-dom';\n\nexport const Li = styled.li`\n  /*----Базовий стиль для мобілки до 479 (респонсивний)----*/\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  /* gap: 20px; */\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    max-width: 220px;\n  }\n\n  /*----Стиль для планшета 768-1200----*/\n\n  @media screen and (min-width: 768px) {\n    max-width: 177px;\n  }\n\n  /*----Стиль для компа від 1200----*/\n\n  @media screen and (min-width: 1200px) {\n    max-width: 226px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  height: 100%;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  overflow: hidden;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  cursor: pointer;\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    max-width: 220px;\n    height: 330px;\n  }\n\n  /*----Стиль для планшета 768-1200----*/\n\n  @media screen and (min-width: 768px) {\n    max-width: 177px;\n    height: 265px;\n  }\n\n  /*----Стиль для компа від 1200----*/\n\n  @media screen and (min-width: 1200px) {\n    max-width: 226px;\n    height: 339px;\n  }\n`;\n\nexport const Img = styled.img`\n  height: 100%;\n  width: 100%;\n  object-fit: cover;\n  transition: scale 0.5s cubic-bezier(0.4, 0, 0.2, 1);\n  display: block;\n\n  &:hover {\n    scale: 1.1;\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: flex;\n  height: 100% !important;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n\n  height: auto;\n  text-decoration: none;\n  color: #ff6b17;\n  padding: 9px 5px;\n  background: #ffe9dc;\n  border: 2px solid rgba(255, 107, 23, 0.15);\n  border-radius: 15px;\n\n  :hover {\n    background: #ff6b17;\n    color: #f5f5f5;\n  }\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// підключення нестилізованого Link як обгортки для постера фільму\nimport { Link } from 'react-router-dom';\n\n// підключення useLocation для отримання поточної адреси сторінки\nimport { useLocation } from 'react-router-dom';\n\n// стилізовані компоненти для верстки\nimport { Li, Thumb, Img, StyledNavLink } from './ListOfMoviesItem.styled';\n\n// постер, якщо на бекенді немає картинки\nimport NoPosterImage from '../../images/noPoster.jpg';\n\nconst ListOfMoviesItem = ({ movie }) => {\n  // створюємо локейшн сторінки\n  const location = useLocation();\n\n  // постер  фільма, але якщо з api прийде постер, то міняємо його на той, що прийшов\n  let posterPath = NoPosterImage;\n  if (movie.poster_path) {\n    posterPath = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n  }\n\n  // фільм огортаємо в Li (бо це елемент списку)\n  // картинку огортаємо в Link на адресу фільма\n  // в to вказуємо посилання в state - посилання на поточну сторінку\n  // на бекенді назви фільмів зберігаються або в параметрі title або в name\n  // бередьачаємо два варіанти залежно від того, де зберігається назва фільма\n  return (\n    <Li>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        <Thumb>\n          <Img src={posterPath} width={`100%`} alt=\"preview\" />\n        </Thumb>\n      </Link>\n\n      {/* якщо назва фільму в параметрі film.title */}\n      {movie.title && (\n        <StyledNavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n          <span>{movie.title}</span>\n        </StyledNavLink>\n      )}\n      {/* якщо назва фільму в параметрі film.name */}\n      {movie.name && (\n        <StyledNavLink to={`/movies/${movie.id}`} state={{ from: location }}>\n          <span>{movie.name}</span>\n        </StyledNavLink>\n      )}\n    </Li>\n  );\n};\n\nexport default ListOfMoviesItem;\n\n// перевірка типів пропів\nListOfMoviesItem.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  /*----Базовий стиль для мобілки до 479 (респонсивний)----*/\n  /* border: 2px solid tomato; */\n  list-style: none;\n  padding: 0;\n  width: 100%;\n\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// підключаємо компонент одного конкретного фільма для мапання\nimport ListOfMoviesItem from '../ListOfMoviesItem/ListOfMoviesItem';\n\n// стилізований компонент (прибираємо ліст стайл і паддінги)\nimport { Ul } from './ListOfMovies.styled';\n\n// в компоненті із отриманого масива фільмів мапаємо(перебираємо) і\n//  верстаємо компонент одного фільма\nconst ListOfMovies = ({ trendingMovies }) => {\n  return (\n    <Ul>\n      {trendingMovies.map(movie => (\n        <ListOfMoviesItem key={movie.id} movie={movie} />\n      ))}\n    </Ul>\n  );\n};\n\n// перевірка пропТайпів\nListOfMovies.propTypes = {\n  trendingMovies: PropTypes.array.isRequired,\n};\n\nexport default ListOfMovies;\n","import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(1);\n`;\n","// підключення спінера лоадера\nimport { CirclesWithBar } from 'react-loader-spinner';\n\n// підключаємо ф-ію роботи з порталами в реакт домі\nimport { createPortal } from 'react-dom';\n\n// стилізація контейнера лоадера\nimport { LoaderContainer } from './Loader.styled';\n\n//створюємо новий елемент який буде порталом для модадки\nconst loaderRoot = document.querySelector('#loader-root');\n\n// в createPortal передаємо нащ доадер в контейнері\n//  доугим параметром передаємо імʼя елемента, який буде порталом\nconst Loader = () => {\n  return createPortal(\n    <LoaderContainer>\n      <CirclesWithBar\n        height=\"150\"\n        width=\"300\"\n        color=\"#ff6b17\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        barColor=\"\"\n        ariaLabel=\"circles-with-bar-loading\"\n      />\n    </LoaderContainer>,\n    loaderRoot\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const StyledTitle = styled.h1`\n  color: #ff6b17;\n  text-align: center;\n  margin: 0;\n  margin-bottom: 10px;\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// імпорт стилю заголовка\nimport { StyledTitle } from './Title.styled';\n\nconst Title = ({ text }) => {\n  return <StyledTitle>{text}</StyledTitle>;\n};\n\nexport default Title;\n\n// перевірка типів пропів\nTitle.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\n// svg в реакт можна підключити через цю бібліотеку\n//npm install react-svg\nimport { ReactSVG } from 'react-svg';\n\nexport const Form = styled.form`\n  position: relative;\n  display: flex;\n  align-items: center;\n  /* justify-content: center; */\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 20px;\n`;\n\nexport const SearchBtn = styled.button`\n  position: absolute;\n  z-index: 1000;\n  background-color: transparent;\n  border: none;\n  margin-left: 10px;\n  margin-right: auto;\n  /* padding: 0; */\n  /* width: 20px; */\n  /* height: 20px; */\n  cursor: pointer;\n  color: rgba(255, 107, 23, 0.5);\n  /* display: flex; */\n  /* align-items: center; */\n  /* justify-content: center; */\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.1);\n    color: rgba(255, 107, 23, 1);\n    /* background-color: rgba(255, 107, 23, 1); */\n  }\n`;\n\nexport const BtnIcon = styled(ReactSVG)`\n  width: 20px;\n  height: 20px;\n  fill: currentColor;\n  /* fill: black; */\n`;\n\nexport const Input = styled.input`\n  /* position: absolute; */\n  display: flex;\n  flex-direction: row;\n  justify-content: left;\n  align-items: center;\n  padding: 20px 30px;\n  padding-left: 48px;\n  /* gap: 10px; */\n\n  width: 300px;\n  height: 48px;\n\n  background: #ffe9dc;\n  border: 2px solid rgba(255, 107, 23, 0.15);\n  border-radius: 50px;\n  font-weight: bold;\n  color: rgba(255, 107, 23, 1);\n\n  &:focus {\n    outline: 2px solid rgba(255, 107, 23, 1);\n  }\n\n  ::placeholder {\n    color: rgba(255, 107, 23, 1);\n    font-weight: 300;\n  }\n`;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSearchLoop(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M19.7122 17.9343L15.1826 13.5835C16.296 12.205 16.9605 10.4767 16.9605 8.6007C16.9605 4.10871 13.1563 0.454529 8.47962 0.454529C3.8042 0.454268 0 4.10845 0 8.6007C0 13.0929 3.8042 16.7474 8.47988 16.7474C10.4968 16.7474 12.3506 16.0666 13.8079 14.933L18.322 19.2689C18.513 19.4534 18.7653 19.5457 19.0166 19.5457C19.2689 19.5457 19.5202 19.4534 19.7122 19.2689C20.096 18.8997 20.096 18.3033 19.7122 17.9343ZM1.96629 8.6007C1.96629 5.15056 4.88859 2.34411 8.47988 2.34411C12.0722 2.34411 14.9945 5.15056 14.9945 8.6007C14.9945 12.0508 12.0722 14.8591 8.47988 14.8591C4.88859 14.8591 1.96629 12.0506 1.96629 8.6007Z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSearchLoop);\nexport default __webpack_public_path__ + \"static/media/search-loop.e28494c9a031110c53bf3b54eecaad20.svg\";\nexport { ForwardRef as ReactComponent };","// бібліотека перевірки пропсів\nimport PropTypes from 'prop-types';\n\n// бібліотека для стейтів на хуках для контрольованого інпута\nimport { useState } from 'react';\n\n//  стиліщовані компоненти\nimport { Form, SearchBtn, BtnIcon, Input } from './Searchbar.styled';\n\n// імпорт свг картинки лупи для кнопки пошуку\nimport SearchImg from '../../images/search-loop.svg';\n\n// компонент сьорчбар\nconst Searchbar = ({ onSubmit }) => {\n  // стейт для контролю інпута\n  const [query, setQuery] = useState('');\n\n  //при зміні значення інпута перезаписуємо внутрішній стейт\n  const handleChangeInput = event => {\n    setQuery(event.currentTarget.value);\n  };\n\n  // при сабміті форми перевіряєм чи не порожній рядок в стейт\n  // і відправляємо запит у загальний стейт і очищаємо форму\n  const onSubmitForm = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      setQuery('');\n      return;\n    }\n    onSubmit(query.trim());\n    setQuery('');\n  };\n\n  // верстка форми\n  // окрема цікавісь до компонента BtnIcon він стилізований і особливо працює з свг (див стиліщовний файл)\n  return (\n    <Form onSubmit={onSubmitForm}>\n      <SearchBtn type=\"submit\">\n        <BtnIcon src={SearchImg} />\n        <span role=\"img\" aria-label=\"search movie\"></span>\n      </SearchBtn>\n\n      <Input\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies...\"\n        value={query}\n        onChange={handleChangeInput}\n      />\n    </Form>\n  );\n};\n\n// перевірка пропсів\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  color: #ff6b17;\n  text-decoration: none;\n  background: #ffe9dc;\n  border: 2px solid rgb(164, 71, 17);\n  border-radius: 50px;\n  padding: 9px 30px;\n  min-width: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n  margin: 10px auto 30px auto;\n\n  &:hover {\n    transform: scale(1.1);\n    background: #ff6b17;\n    color: #ffe9dc;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n`;\n","// бібліотека перевірки проп тайпів\nimport PropTypes from 'prop-types';\n\n// підключення стилізованих компонентів\nimport { Button } from './LoadMoreButton.styled';\n\n// компонент кнопки LoadMoreButton\nconst LoadMoreButton = ({ loadMoreMovies }) => {\n  return (\n    <>\n      <Button onClick={loadMoreMovies}>Load more</Button>\n    </>\n  );\n};\n\n// перевірка PropTypes\nLoadMoreButton.propTypes = {\n  loadMoreMovies: PropTypes.func.isRequired,\n};\n\nexport default LoadMoreButton;\n","// імпортуємо useState\nimport { useState, useEffect } from 'react';\n\nimport { useSearchParams } from 'react-router-dom';\n\n// підключення бібліотеки повідомлень\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// підключення функції отримання фільмів за назвою і сторінкою із api\nimport { getMoviesByNameAndPage } from '../utils/api';\n\n// підключення компонентів\nimport Title from '../components/Title/Title';\nimport Searchbar from '../components/Searchbar/Searchbar';\nimport ListOfMovies from 'components/ListOfMovies/ListOfMovies';\nimport Loader from 'components/Loader/Loader';\nimport LoadMoreButton from '../components/LoadMoreButton/LoadMoreButton';\n\n// підключення стилізованих компонентів\nimport { Container } from '../components/App.styled';\n\nimport SearchingImage from '../images/searching.gif';\n\n// наш головний компонент\nconst Movies = () => {\n  //наш стейт\n  // moviesArray - масив для рендерингу\n  // query - пошуковий запит після сабміту\n  // showModal - чи показуємо модалку\n  // page - номер сторінки, за замовчанням 1\n  // showBtnLoadMore - чи показувати кнопку завантажити ще\n  // isLoading - чи показувати лоадер\n  const [moviesArray, setMoviesArray] = useState([]);\n  // const [query, setQuery] = useState('');\n  const [page, setPage] = useState(1);\n  const [showBtnLoadMore, setShowBtnLoadMore] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  // перша верстка використовуючи запис з адресного рядка\n  useEffect(() => {\n    // якщо параметрів немає, то просто виходимо\n    if (!query) {\n      return;\n    }\n\n    setShowLoader(true);\n\n    getMoviesByNameAndPage(query, 1)\n      .then(data => {\n        setMoviesArray([...data.results]);\n        const alreadyDownloaded = 20 * 1;\n        if (alreadyDownloaded < data.total_results) {\n          setShowBtnLoadMore(true);\n        }\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n    // eslint-disable-next-line\n  }, []);\n\n  // що робити з отриманими даними при натиску кнопки SUBMIT у формі\n  // викликати ф-ію, яка стирає moviesArray на пустий і скидає page на 1\n  // записує значення пошукового запиту в поле query\n  // викликає функцію запиту на сервер за комбінацією запиту і першою сторінкою\n  // записуємо в адресний рядок параметр query, зі значенням toFind яке шукаємо\n  const onSubmitSearchBtn = toFind => {\n    if (toFind === query) {\n      toast(`Ви повторно намагаєтесь знайти відео про: \"${toFind}\"!`);\n      return;\n    }\n    setMoviesArray([]);\n    setPage(1);\n    getFromAPI(toFind, 1);\n    setSearchParams({ query: toFind });\n  };\n\n  // при натиску кнопки LOAD_MORE\n  // ми викликаємо функцію яка повертає ше фільми за запитом із збільшеним на 1 номером сторінки\n  // в стейт перезаписуємо сторінку + 1\n  const loadMoreMovies = () => {\n    getFromAPI(query, page + 1);\n    setPage(prevPage => prevPage + 1);\n  };\n\n  // функція, яка за запитом і сторінкою отримує дані про фільми і\n  // записуємо в стейт, ловимо помилки(?), на початку показуємо, а на фінал знімаємо лоадер\n  const getFromAPI = (toFind, page) => {\n    setShowLoader(true);\n    //запит на сервер\n    getMoviesByNameAndPage(toFind, page)\n      .then(data => {\n        // console.log('data', data);\n        // якщо немає жодного збігу, то виводимо про це повідомлення\n        // і скидаємо стейт до початкового стану (query, page, showBtnLoadMore), щоб не засмічувався\n        if (data.total_results < 1) {\n          toast.error(`За запитом \"${toFind}\" результатів нема!`);\n          setPage(1);\n          setSearchParams({});\n          setShowBtnLoadMore(false);\n        }\n        //Якщо у нас є результати для показу, то треба\n        // записати (розпилити) в стейт moviesArray отриманий масив\n        else if (data.total_results !== 0) {\n          setMoviesArray(prevMoviesArray => [\n            ...prevMoviesArray,\n            ...data.results,\n          ]);\n          //\n          //рахуємо чи є ще на сервері фільми.\n          //тобто чи треба показувати кнопку \"завантажити ще\" (статус showBtnLoadMore)\n          // для цього кількість результатів у одному запиті множимо на поточний номер сторінки\n          // і отримуємо кількість уже отриманих на компі фільмів\n          // на сервері лишаються ще фільми, якщо ця цифра менше за data.total_results\n          const alreadyDownloaded = 20 * page;\n          if (alreadyDownloaded < data.total_results) {\n            // перше повідомлення, якщо це перший виведений результат\n            if (page === 1) {\n              toast(\n                `За запитом \"${toFind}\" знайдено фільмів: ${data.total_results}. Натисни \"завантажити ще\", щоб отримати ще 20 фільмів!`\n              );\n            }\n            // повідомлення, якщо отримуємо другий чи подальший результат\n            else {\n              const moreMovies = data.total_results - alreadyDownloaded;\n              toast(\n                `За запитом \"${toFind}\" лишилося ще фільмів: ${moreMovies} із ${data.total_results}. Натисни \"завантажити ще\", щоб отримати ще 20 фільмів!`\n              );\n            }\n            // оскільки на сервері ще є фільми, то показуємо кнопку завантажити ще\n            setShowBtnLoadMore(true);\n          }\n          // якщо ж на сервері більше не лишилося фільмів, то виводимо про це повідомлення і прибираємо кнопку LoadMore\n          else {\n            toast(\n              `Це всі результати за запитом \"${toFind}\". Більше результатів нема!`\n            );\n            setShowBtnLoadMore(false);\n          }\n        }\n      })\n      // .catch(e => {\n      // setError(e.message);\n      // toast.error(e.message);\n      // console.log('error', error);\n      // })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  };\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      <ToastContainer autoClose={2000} />\n      <section>\n        <Container>\n          <Title text=\"Search movies\" />\n          <Searchbar onSubmit={onSubmitSearchBtn} />\n\n          {moviesArray.length === 0 && (\n            <img src={SearchingImage} alt=\"searching\" />\n          )}\n          {moviesArray.length !== 0 && (\n            <ListOfMovies trendingMovies={moviesArray} />\n          )}\n          {showBtnLoadMore && (\n            <LoadMoreButton loadMoreMovies={loadMoreMovies} />\n          )}\n        </Container>\n      </section>\n    </>\n  );\n};\n\nexport default Movies;\n","// базовий URL і ключ для доступу до API\nconst API_KEY = 'f051ac50d3bfe0c3fd75f02c1ff7b688';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n// // 1 отримання трендових фільмів fetch-then\n// export const getTrendiingMovies = () => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/trending/all/week?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 1-1 отримання популярних фільмів fetch-then (без косяків апішки)\nexport const getTrendiingMovies = () => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n\n// // 2-1 отримання фільму по id fetch-then\n// export const getMovieById = movieId => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 2-2 отримання фільму по id з використанням асинхронної функції async-await\nexport const getMovieById = async movieId => {\n  try {\n    const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n    const response = await fetch(URL);\n    const movie = await response.json();\n    // console.log('movie', movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// 3 отримання фільмів fetch-then за назвою запиту і сторінкою\nexport const getMoviesByNameAndPage = (toFind, page) => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/search/movie?query=${toFind}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 4 отримання акторів fetch-then по id фільма\nexport const getMovieCastById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 5 отримання review fetch-then по id фільма\nexport const getMovieReviewById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n"],"names":["Li","styled","Thumb","Img","StyledNavLink","NavLink","movie","location","useLocation","posterPath","NoPosterImage","poster_path","to","id","state","from","src","width","alt","title","name","Ul","trendingMovies","map","LoaderContainer","loaderRoot","document","querySelector","createPortal","height","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","StyledTitle","text","Form","SearchBtn","BtnIcon","ReactSVG","Input","onSubmit","useState","query","setQuery","event","preventDefault","trim","type","SearchImg","role","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","Button","loadMoreMovies","onClick","moviesArray","setMoviesArray","page","setPage","showBtnLoadMore","setShowBtnLoadMore","showLoader","setShowLoader","useSearchParams","searchParams","setSearchParams","get","useEffect","getMoviesByNameAndPage","then","data","results","total_results","finally","getFromAPI","toFind","toast","prevMoviesArray","alreadyDownloaded","moreMovies","Loader","autoClose","Title","length","SearchingImage","ListOfMovies","prevPage","API_KEY","BASE_URL","getTrendiingMovies","URL","fetch","response","json","getMovieById","movieId","console","log","message","getMovieCastById","getMovieReviewById"],"sourceRoot":""}