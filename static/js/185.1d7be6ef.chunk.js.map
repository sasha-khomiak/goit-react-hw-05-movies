{"version":3,"file":"static/js/185.1d7be6ef.chunk.js","mappings":"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","sources":["components/CastList/CastList.styled.jsx","components/CastListItem/CastListItem.styled.jsx","components/CastListItem/CastListItem.jsx","components/CastList/CastList.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","utils/api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  /*----Базовий стиль для мобілки до 479 (респонсивний)----*/\n  /* border: 2px solid tomato; */\n  list-style: none;\n  padding: 0;\n  width: 100%;\n\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 10px;\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n`;\n","import styled from 'styled-components';\n\n// картка актора\nexport const ActorCard = styled.li`\n  /* width: 100%; */\n  width: calc((100% - 10px) / 2);\n  transition: box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n\n  /*----Базовий стиль для мобілки 480-767 (адаптивний)----*/\n  @media screen and (min-width: 480px) {\n    width: calc((100% - 10px) / 2);\n  }\n\n  /*----Стиль для планшета 768-1200----*/\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 30px) / 4);\n  }\n\n  /*----Стиль для компа від 1200----*/\n\n  @media screen and (min-width: 1200px) {\n    width: calc((100% - 50px) / 6);\n  }\n`;\n\n// обгортка фотокартки\nexport const PhotoCardWrap = styled.div`\n  position: relative;\n  overflow: hidden;\n`;\n\n// фотка актора (прибираємо 4 пікселі внизу)\nexport const Img = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\n\n// всплавна плашка\nexport const CardSlider = styled.div`\n  display: flex;\n  align-items: center;\n  position: absolute;\n  justify-content: center;\n  top: 0;\n  left: 0;\n  padding-left: 20px;\n  padding-right: 20px;\n  width: 100%;\n\n  background-color: rgba(255, 107, 23, 0.8);\n  height: 100%;\n\n  transform: translateY(100%);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  ${ActorCard}:hover & {\n    transform: translateY(0%);\n  }\n`;\n\n// роль в фільмі показується на вспливній плашці\nexport const CharacterText = styled.p`\n  font-size: 16px;\n  line-height: calc(28 / 18);\n  letter-spacing: 0.03em;\n  color: white;\n  text-align: center;\n`;\n\n// блок у який огорнуте імʼя актора\nexport const NameBlock = styled.div`\n  padding: 10px 20px;\n`;\n\n// імʼя актора\nexport const NameText = styled.div`\n  font-weight: bold;\n  text-align: center;\n  font-size: 14px;\n  line-height: 1.3;\n  letter-spacing: 0.06em;\n\n  color: rgba(255, 107, 23, 1);\n`;\n","// бібліотека перевірки проп тайпів\nimport PropTypes from 'prop-types';\n\n// фото, якщо з бекенда не прийшла фотка актора\nimport noActorPhoto from '../../images/noActorPhoto.jpg';\n\n// стилізовані компоненти\nimport {\n  ActorCard,\n  PhotoCardWrap,\n  Img,\n  CardSlider,\n  CharacterText,\n  NameBlock,\n  NameText,\n} from './CastListItem.styled';\n\n// Компонент CastListItem\nconst CastListItem = ({ actor }) => {\n  //створюєм дінк на фото, якщо з бекенда прийде фотка, то перезаписуємо на нову\n  let actorPhoto = noActorPhoto;\n  if (actor.profile_path) {\n    actorPhoto = `https://image.tmdb.org/t/p/w500${actor.profile_path}`;\n  }\n\n  // оформлення картки актора\n  return (\n    <ActorCard>\n      <PhotoCardWrap>\n        <Img src={actorPhoto} alt={actor.name} />\n        <CardSlider>\n          <CharacterText>{actor.character}</CharacterText>\n        </CardSlider>\n      </PhotoCardWrap>\n\n      <NameBlock>\n        <NameText>{actor.name}</NameText>\n      </NameBlock>\n    </ActorCard>\n  );\n};\n\n// перевірка проп тайпів\nCastListItem.propTypes = {\n  actor: PropTypes.object.isRequired,\n};\n\nexport default CastListItem;\n","// бібліотека перевірки проп тайпів\nimport PropTypes from 'prop-types';\n\n// стиліщовані компоненти\nimport { Ul } from './CastList.styled';\n\n// компонент для верстки одного актора\nimport CastListItem from '../CastListItem/CastListItem';\n\n// компонент CastList\n// у ньому мапаємо масив акторів і передаємо в компонент відображення одного актора\nconst CastList = ({ cast }) => {\n  return (\n    <Ul>\n      {cast.map(actor => (\n        <CastListItem key={actor.cast_id} actor={actor} />\n      ))}\n    </Ul>\n  );\n};\n\n// перевірка проптипів\nCastList.propTypes = {\n  cast: PropTypes.array.isRequired,\n};\n\nexport default CastList;\n","import styled from 'styled-components';\n\nexport const NoCast = styled.div`\n  margin-bottom: 20px;\n  box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 6px rgba(0, 0, 0, 0.16);\n  padding: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin-bottom: 20px;\n  font-weight: bold;\n  /* text-align: center; */\n  font-size: 18px;\n  line-height: 1.3;\n  letter-spacing: 0.06em;\n\n  color: rgba(255, 107, 23, 1);\n`;\n","// підключення бібліотеки для роботи зі useState, useEffect\nimport { useState, useEffect } from 'react';\n\n// підключення бібліотеки для отримання параметрів з адресного рядка\nimport { useParams } from 'react-router-dom';\n\n// ф-ія отримання акторів по Id фільма\nimport { getMovieCastById } from '../../utils/api';\n\n// компонент CastList, який верстатиме акторів за наданим йому масивом обʼєктів\nimport CastList from '../CastList/CastList';\n\n// стилізовані компоненти (якщо ніяких акторів в базі немає)\nimport { NoCast, NoCastText } from './Cast.styled';\n\n// компонент\nconst Cast = () => {\n  // стейт в якому  будемо зберігати  масив обʼєктів про акторів\n  const [cast, setCast] = useState(null);\n\n  // отримуємо Id фільма із нашого адресного рядка (див Арр)\n  const { movieId } = useParams();\n\n  // Якщо мінятимется параметр movieId в адресному рядку\n  // отримуємо дані про актоів фільму\n  // якщо довжина масива 0, то просто виходимо\n  // якщо прийшов хоч 1 результат в масиві, то записуємо його в cast\n  useEffect(() => {\n    getMovieCastById(movieId).then(data => {\n      if (data.cast.length === 0) {\n        return;\n      }\n      setCast(data.cast);\n    });\n  }, [movieId]);\n\n  // якщо в масиві cast є дані, то верстаємо, якщо нема, то виводимо повідомлення, що результатів немає\n  return (\n    <>\n      {cast && <CastList cast={cast} />}\n      {!cast && (\n        <NoCast>\n          <NoCastText>There is no casts</NoCastText>\n        </NoCast>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","// базовий URL і ключ для доступу до API\nconst API_KEY = 'f051ac50d3bfe0c3fd75f02c1ff7b688';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n// // 1 отримання трендових фільмів fetch-then\n// export const getTrendiingMovies = () => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/trending/all/week?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 1-1 отримання популярних фільмів fetch-then (без косяків апішки)\nexport const getTrendiingMovies = () => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n\n// // 2-1 отримання фільму по id fetch-then\n// export const getMovieById = movieId => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 2-2 отримання фільму по id з використанням асинхронної функції async-await\nexport const getMovieById = async movieId => {\n  try {\n    const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n    const response = await fetch(URL);\n    const movie = await response.json();\n    // console.log('movie', movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// 3 отримання фільмів fetch-then за назвою запиту і сторінкою\nexport const getMoviesByNameAndPage = (toFind, page) => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/search/movie?query=${toFind}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 4 отримання акторів fetch-then по id фільма\nexport const getMovieCastById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 5 отримання review fetch-then по id фільма\nexport const getMovieReviewById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["Ul","styled","ActorCard","PhotoCardWrap","Img","CardSlider","CharacterText","NameBlock","NameText","actor","actorPhoto","noActorPhoto","profile_path","src","alt","name","character","cast","map","cast_id","NoCast","NoCastText","useState","setCast","movieId","useParams","useEffect","getMovieCastById","then","data","length","API_KEY","BASE_URL","getTrendiingMovies","URL","fetch","response","json","getMovieById","movie","console","log","message","getMoviesByNameAndPage","toFind","page","getMovieReviewById","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}