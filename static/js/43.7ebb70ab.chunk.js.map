{"version":3,"file":"static/js/43.7ebb70ab.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","pages/MovieDetails.jsx","utils/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const LoaderContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) scale(1);\n`;\n","// підключення спінера лоадера\nimport { CirclesWithBar } from 'react-loader-spinner';\n\n// підключаємо ф-ію роботи з порталами в реакт домі\nimport { createPortal } from 'react-dom';\n\n// стилізація контейнера лоадера\nimport { LoaderContainer } from './Loader.styled';\n\n//створюємо новий елемент який буде порталом для модадки\nconst loaderRoot = document.querySelector('#loader-root');\n\n// в createPortal передаємо нащ доадер в контейнері\n//  доугим параметром передаємо імʼя елемента, який буде порталом\nconst Loader = () => {\n  return createPortal(\n    <LoaderContainer>\n      <CirclesWithBar\n        height=\"150\"\n        width=\"300\"\n        color=\"#ff6b17\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        barColor=\"\"\n        ariaLabel=\"circles-with-bar-loading\"\n      />\n    </LoaderContainer>,\n    loaderRoot\n  );\n};\n\nexport default Loader;\n","import styled from 'styled-components';\n\n// иуи підключаємо NavLink і стилізовані відаємо в головний файл компонента\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieCardWrap = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const MovieBlock = styled.div`\n  /* ----Стиль для планшета 768-1200----*/\n  /*----Стиль для компа від 1200----*/\n  @media screen and (min-width: 768px) {\n    display: flex;\n    flex-direction: row;\n  }\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  /* ----Стиль для планшета 768-1200----*/\n  @media screen and (min-width: 768px) {\n    /* max-width: 150px; */\n    width: 300px;\n    margin-right: 20px;\n  }\n`;\n\nexport const MovieTitle = styled.h2`\n  color: #ff6b17;\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const Extra = styled.nav`\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n\n  @media screen and (min-width: 768px) {\n    padding-left: 0;\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  color: #ff6b17;\n  text-decoration: none;\n  background: #ffe9dc;\n  /* border: 2px solid rgb(164, 71, 17); */\n  border-radius: 50px;\n  padding: 9px 30px;\n  min-width: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 250ms linear;\n\n  &:hover {\n    transform: scale(1.1);\n    background: #ff6b17;\n    color: white;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n\n  &.active {\n    font-weight: 900;\n    background: #ff6b17;\n    color: white;\n  }\n`;\n\nexport const StyledNavLinkBack = styled(NavLink)`\n  color: #ff6b17;\n  text-decoration: none;\n  background: #ffe9dc;\n  /* border: 2px solid rgb(164, 71, 17); */\n  border-radius: 50px;\n  padding: 9px 30px;\n  width: 120px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 250ms linear;\n  margin-bottom: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  &:hover {\n    transform: scale(1.1);\n    background: #ff6b17;\n    color: white;\n    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.12), 0 4px 4px rgba(0, 0, 0, 0.06),\n      1px 4px 6px rgba(0, 0, 0, 0.16);\n  }\n\n  @media screen and (min-width: 768px) {\n    margin-left: 0;\n  }\n`;\n","// імпорт бібліотеки PropTypes\nimport PropTypes from 'prop-types';\n\n// іпморт бібліотеки для роботи з локейшн\nimport { useLocation } from 'react-router-dom';\n\n// бібліотека для роботи з useRef\nimport { useRef } from 'react';\n\n// стилізовані компоненти\nimport {\n  MovieCardWrap,\n  MovieBlock,\n  Img,\n  MovieTitle,\n  Title,\n  StyledNavLink,\n  StyledNavLinkBack,\n  Extra,\n} from './MovieCard.styled';\n\n// картинка, якщо немає на бекенді постера фільма\nimport NoPosterImage from '../../images/noPoster.jpg';\n\n// компонент картка нашого фільма\n\nconst MovieCard = ({ movieInfo }) => {\n  // створюємо локейшн (у ньому є state в якому вказано звідки ми прийшли)\n  // Використовуючи useRef створюємо backLinkLocationRef (посилання звідки ми прийшли)\n  // location.state?.from те саме, що і location.state && location.state.from\n  // при перерендерингу значення цієї змінної не зітреться\n  // ?? '/' вказуємо на випадок, якшо ми прийшли по прямому лінку, тоді це буде шлях на головну\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/');\n\n  // рахуємо score\n  const score = Math.round(movieInfo.vote_average * 10);\n\n  // витягаємо жанри і обʼєднуємо в рядок через кому\n  let genres = movieInfo.genres.map(genre => genre.name).join(', ');\n\n  // присвоюємо постеру за замовчанням картинку, якщо в пропсі є шлях на картинку то оновлюємо\n  let posterPath = NoPosterImage;\n  if (movieInfo.poster_path) {\n    posterPath = `https://image.tmdb.org/t/p/w500${movieInfo.poster_path}`;\n  }\n\n  // рендеринг картки фільма\n  // на кнопку Back ставимо раніше створене посилання на сторінку\n  // оформлюємо картку стилізованими компонентами\n  // лінки NavLink стилізуємо у файлі стилізованих компонентів\n  return (\n    <MovieCardWrap>\n      <StyledNavLinkBack to={backLinkLocationRef.current}>\n        Back\n      </StyledNavLinkBack>\n\n      <MovieBlock>\n        <div>\n          <Img src={posterPath} alt=\"preview\" />\n        </div>\n        <div>\n          <MovieTitle>{movieInfo.title}</MovieTitle>\n          <p>User score: {score} </p>\n\n          <Title>Overview </Title>\n          <div>{movieInfo.overview}</div>\n          <Title>Genres </Title>\n          <p>{genres} </p>\n        </div>\n      </MovieBlock>\n      <Extra>\n        <StyledNavLink to=\"cast\">Cast</StyledNavLink>\n        <StyledNavLink to=\"reviews\">Reviews</StyledNavLink>\n      </Extra>\n    </MovieCardWrap>\n  );\n};\n\nexport default MovieCard;\n\n// перевірка пропТайпів\nMovieCard.propTypes = {\n  movieInfo: PropTypes.object.isRequired,\n};\n","// підключення  і хуків useState, useEffect\nimport { useState, useEffect } from 'react';\n\n// підключення useParams для отримання параметрів з адресного рядка\n// підключення Outlet в який поміститься вміст кастс і ревью. див маршрутизацію вкладеності в Арр\nimport { useParams, Outlet } from 'react-router-dom';\n\n// підключення функції отримання даних про фільм із api\nimport { getMovieById } from '../utils/api';\n\n// підключення компонентів\nimport Loader from '../components/Loader/Loader';\nimport MovieCard from '../components/MovieCard/MovieCard';\n\n// підключення стилізованоно контейнера для відсікання щирини\nimport { Container } from 'components/App.styled';\n\n// компонент сторінки MovieDetails\nconst MovieDetails = () => {\n  // отримуємо movieId із адресного рядка\n  const { movieId } = useParams();\n\n  // масив у якому зберігатимемо  обʼєкт з описом фільма\n  const [movieInfo, setMovieInfo] = useState(null);\n\n  // стан показування лоадера\n  const [showLoader, setShowLoader] = useState(false);\n\n  // завантаження даних з сервера і встановлення стейтів\n  useEffect(() => {\n    setShowLoader(true);\n    getMovieById(movieId)\n      .then(data => {\n        setMovieInfo(data);\n      })\n      .finally(() => {\n        setShowLoader(false);\n      });\n  }, [movieId]);\n\n  // рендеринг картки фільма: блок лоадера, секція з контейнером,\n  // всередині картка про фільм і Outlet в якому будуть ревью і касти\n  return (\n    <>\n      {showLoader && <Loader />}\n\n      <section>\n        <Container>\n          {movieInfo && <MovieCard movieInfo={movieInfo} />}\n          <Outlet />\n        </Container>\n      </section>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","// базовий URL і ключ для доступу до API\nconst API_KEY = 'f051ac50d3bfe0c3fd75f02c1ff7b688';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\n// // 1-1 отримання трендових фільмів fetch-then\n// // працює некоректно через бани на самому api\n// export const getTrendiingMovies = () => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/trending/all/week?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 1-2 отримання популярних фільмів fetch-then (без косяків апішки)\nexport const getTrendiingMovies = () => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n\n// // 2-1 отримання фільму по id fetch-then\n// export const getMovieById = movieId => {\n//   //повний URL запиту\n//   const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n//   return fetch(URL).then(response => response.json());\n// };\n\n// 2-2 отримання фільму по id з використанням асинхронної функції async-await\nexport const getMovieById = async movieId => {\n  try {\n    const URL = `${BASE_URL}3/movie/${movieId}?api_key=${API_KEY}`;\n    const response = await fetch(URL);\n    const movie = await response.json();\n    // console.log('movie', movie);\n    return movie;\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\n// 3 отримання фільмів fetch-then за назвою запиту і сторінкою\nexport const getMoviesByNameAndPage = (toFind, page) => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/search/movie?query=${toFind}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 4 отримання акторів fetch-then по id фільма\nexport const getMovieCastById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/credits?language=en-US&api_key=${API_KEY}`;\n  return fetch(URL).then(response => response.json());\n};\n\n// 5 отримання review fetch-then по id фільма\nexport const getMovieReviewById = movieId => {\n  //повний URL запиту\n  const URL = `${BASE_URL}3/movie/${movieId}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n  return fetch(URL).then(response => response.json());\n};\n"],"names":["LoaderContainer","styled","loaderRoot","document","querySelector","createPortal","height","width","color","wrapperStyle","wrapperClass","visible","outerCircleColor","innerCircleColor","barColor","ariaLabel","MovieCardWrap","MovieBlock","Img","MovieTitle","Title","Extra","StyledNavLink","NavLink","StyledNavLinkBack","movieInfo","location","useLocation","backLinkLocationRef","useRef","state","from","score","Math","round","vote_average","genres","map","genre","name","join","posterPath","NoPosterImage","poster_path","to","current","src","alt","title","overview","movieId","useParams","useState","setMovieInfo","showLoader","setShowLoader","useEffect","getMovieById","then","data","finally","Loader","API_KEY","BASE_URL","getTrendiingMovies","URL","fetch","response","json","movie","console","log","message","getMoviesByNameAndPage","toFind","page","getMovieCastById","getMovieReviewById"],"sourceRoot":""}